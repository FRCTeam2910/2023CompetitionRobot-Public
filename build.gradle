import java.nio.charset.StandardCharsets

plugins {
	id 'application'
	id 'java'
	id 'idea'
    id 'com.github.johnrengelman.shadow'
    id 'edu.wpi.first.GradleRIO'
    id 'com.diffplug.spotless'
    id 'net.ltgt.errorprone'
    id 'com.palantir.java-format'
    id 'com.peterabeles.gversion' version '1.10'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

application {
    mainClass.set('org.frcteam2910.c2023.Main')
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamOrDefault(2910)
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    jarTask = shadowJar
//                    // https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/index.html
//                    gcType = edu.wpi.first.gradlerio.deploy.roborio.GarbageCollectorType.Other
//                    jvmArgs << '-XX:+UseG1GC'

                    // Code Profiler
//                    jvmArgs.add("-Dcom.sun.management.jmxremote=true")
//                    jvmArgs.add("-Dcom.sun.management.jmxremote.port=1099")
//                    jvmArgs.add("-Dcom.sun.management.jmxremote.local.only=false")
//                    jvmArgs.add("-Dcom.sun.management.jmxremote.ssl=false")
//                    jvmArgs.add("-Dcom.sun.management.jmxremote.authenticate=false")
//                    jvmArgs.add("-Djava.rmi.server.hostname=10.29.10.2")
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Configuration for AdvantageKit
repositories {
    maven {
        url = uri('https://maven.pkg.github.com/Mechanical-Advantage/AdvantageKit')
        credentials {
            username = 'Mechanical-Advantage-Bot'
            password = '\u0067\u0068\u0070\u005f\u006e\u0056\u0051\u006a\u0055\u004f\u004c\u0061\u0079\u0066\u006e\u0078\u006e\u0037\u0051\u0049\u0054\u0042\u0032\u004c\u004a\u006d\u0055\u0070\u0073\u0031\u006d\u0037\u004c\u005a\u0030\u0076\u0062\u0070\u0063\u0051'
        }
    }
}

configurations.all {
    exclude group: 'edu.wpi.first.wpilibj'
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()
//    implementation project(":common")

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    implementation 'com.google.errorprone:error_prone_annotations:2.16'
    errorprone('com.google.errorprone:error_prone_core:2.16')

    implementation 'org.georegression:georegression:0.24'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

    def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit.junction:junction-autolog:$akitJson.version"
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Configure jar and deploy tasks
wpi.java.configureExecutableTasks(shadowJar)
wpi.java.configureTestTasks(test)
wpi.java.debugJni.set(false)

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs.add '-XDstringConcat=inline'
    options.errorprone.disableWarningsInGeneratedCode = true
}

spotless {
    java {
        target fileTree('src') {
            include '**/*.java'
        }
        toggleOffOn()
        removeUnusedImports()
        importOrder('java', '', '\\#').wildcardsLast()
        trimTrailingWhitespace()
        setEncoding(StandardCharsets.UTF_8)
        indentWithSpaces(4)
    }
}

build.dependsOn spotlessApply

sourceSets.main.java.srcDir(file("build/generated/sources/buildInfo/main/java"))

project.compileJava.dependsOn(createVersionFile)
gversion {
    srcDir       = "build/generated/sources/buildInfo/main/java"
    classPackage = "org.frcteam2910.c2023"
    className    = "BuildInfo"
    dateFormat   = "yyyy-MM-dd HH:mm:ss z"
    timeZone     = "America/Los_Angeles"
    indent       = "    "
}
